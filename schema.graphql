scalar DateTime

type Query {
  user(id: ID!): User
  contributor(id: ID!): Contributor
  partnerOrg(id: ID!): PartnerOrg
  contribution(id: ID!): Contribution
  ikcReport(id: ID!): IKCReport
  submissionItem(id: ID!): SubmissionItem
  researchProject(id: ID!): ResearchProject
}

type Mutation {
  # User mutations
  createUser(
    siteAdminId: ID!
    firstName: String!
    lastName: String!
    isSiteAdmin: Boolean!
  ): ID
  updateUser(userId: ID!, firstName: String, lastName: String): Boolean
  disableUser(siteAdminId: ID!, userId: ID!): Boolean
  reactivateUser(siteAdminId: ID!, userId: ID!): Boolean

  # TODO: Finish below mutations, may need to update inputs etc. as needed but commenting out to reduce generation time
  # # PartnerOrg mutations
  createPartnerOrg(siteAdminId: ID!, adminId: ID!, name: String!): ID
  createContributor(
    userId: ID!
    partnerOrgAdminId: ID!
    partnerOrgId: ID!
    hourlyRate: Float!
    benRatePer: Float!
  ): ID!
  addPartnerOrgAdmin(userId: ID!, newAdminID: ID!): Boolean
  removePartnerAdmin(userId: ID!, removedAdminID: ID!): Boolean

  # # contribution item mutations (create is for each subitem as you cannot have two for one contribution)
  createHourContribution(
    contributorId: ID!

    date: DateTime!
    details: String

    hours: Float!
  ): ID
  createOtherContribution(
    contributorId: ID!

    date: DateTime!
    details: String

    itemName: String!
    value: Float!
  ): ID
  removeContribution(userId: ID!, contributionId: ID!): Boolean

  # # IKC Report mutations
  createIKCReport(
    userId: ID!
    partnerOrgId: ID!
    reportStartDate: DateTime!
    reportEndDate: DateTime!
    employeeHourIds: [ID]
    otherContributionIds: [ID]
  ): ID
  createSubmissionItem(
    userId: ID!
    ikcReportID: ID!
    submitterId: ID!
    submissionDate: DateTime!
  ): ID
  submitIKCReport(userId: ID!, submissionItemId: ID!): Boolean
  approveIKCReport(userId: ID!, submissionItemID: ID!): Boolean
  denyIKCReport(userId: ID!, submissionItemID: ID!): Boolean

  # # Research Project mutations
  createResearchProject(
    siteAdminId: ID!
    adminId: ID!
    projectTitle: String!
    startDate: DateTime!
    endDate: DateTime!
  ): ID
  addPartnerOrg(userId: ID!, researchProjectId: ID!, partnerOrgId: ID!): Boolean
  removePartnerOrg(
    userId: ID!
    researchProjectId: ID!
    partnerOrgId: ID!
  ): Boolean
  addNewAdmin(userId: ID!, newAdmin: ID!): Boolean
  removeAdmin(userId: ID!, adminId: ID!): Boolean
}

type User {
  id: ID!
  firstName: String!
  lastName: String!
  siteAdmin: Boolean!
  active: Boolean
}

# TODO: implement below types , should be roughly in this order but commenting out to avoid issues with prisma schema being different from graphql
# in general refer to prisma but leave out some parts which may not be needed (ex include user id not user obj in contributor...)
type Contributor {
  id: ID
  userId: ID!
  partnerOrgId: ID!

  hourlyRate: Float!
  benRatePer: Float!
}

type PartnerOrg {
  id: ID!
  name: String!
  admins: [ID]!
  contributors: [Contributor]
}

# id for hourly and other are foreign keys with contrib item since 1-1
type HourContribution {
  hours: Float!
  hourlyRate: Float!
  benRatePer: Float!
}

type OtherContribution {
  itemName: String!
  value: Float!
}

type Contribution {
  id: ID!
  date: DateTime!
  details: String

  hourContribution: HourContribution
  otherContribution: OtherContribution
}

type SubmissionItem {
  id: ID
  submitterId: ID
  ikcReportID: ID
  submissionDate: DateTime
}

type IKCReport {
  id: ID!
  partnerOrgId: ID!
  submissionHistory: [SubmissionItem]
  reportStartDate: DateTime!
  reportEndDate: DateTime!
  contributions: [Contribution]
}

type ResearchProject {
  id: ID!
  projectTitle: String
  startDate: DateTime
  endDate: DateTime
  admins: [User]
  projectPartners: [PartnerOrg]
  ikcReports: [IKCReport]
}
