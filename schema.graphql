scalar DateTime

type Query {
  user(id: ID!): User
  getAllContributionsForUser(userId: ID!): [Contribution]
  getAllContributionsForContributor(contributorId: ID!): [Contribution]
  contributor(id: ID!): Contributor
  partnerOrg(id: ID!): PartnerOrg
  getAllOrgsForUser(userId: ID!): [PartnerOrg]
  contribution(id: ID!): Contribution
  ikcReport(id: ID!): IKCReport
  researchProject(id: ID!): ResearchProject
  getAllOrgsForProject(projectId: ID!): [PartnerOrg]
  getAllProjForOrgs(orgId: ID!): [ResearchProject]
  getAllIKCByPartnerOrg(id: ID!): [IKCReport]
  getAllApprovedContribByOrg(id: ID!): [ProjContrib]
}

type Mutation {
  # User mutations
  login(email: String!, password: String!): ID

  createUser(
    siteAdminId: ID!
    firstName: String!
    lastName: String!
    email: String!
    password: String!
    isSiteAdmin: Boolean!
  ): ID

  updateUser(userId: ID!, firstName: String, lastName: String): Boolean
  disableUser(siteAdminId: ID!, userId: ID!): Boolean
  reactivateUser(siteAdminId: ID!, userId: ID!): Boolean

  # # PartnerOrg mutations
  createPartnerOrg(siteAdminId: ID!, adminId: ID!, name: String!): ID
  createContributor(
    userId: ID!
    partnerOrgAdminId: ID!
    partnerOrgId: ID!
    researchProjectId: ID!
    hourlyRate: Float!
    benRatePer: Float!
  ): ID
  addPartnerOrgAdmin(orgAdminId: ID!, orgId: ID!, newAdminId: ID!): Boolean
  removePartnerOrgAdmin(
    orgAdminId: ID!
    orgId: ID!
    removedAdminId: ID!
  ): Boolean

  # # contribution item mutations (create is for each subitem as you cannot have two for one contribution)
  createHourContribution(
    contributorId: ID!

    date: DateTime!
    details: String!

    hours: Float!
  ): ID
  createOtherContribution(
    contributorId: ID!

    date: DateTime!
    details: String!

    itemName: String!
    value: Float!
    items: Int!
  ): ID
  removeContribution(userId: ID!, contributionId: ID!): Boolean

  # # IKC Report mutations
  createIKCReport(userId: ID!, partnerOrgId: ID!, researchProjectId: ID!): ID
  submitIKCReport(ikcReportId: ID!, userId: ID!): Boolean
  approveIKCReport(userId: ID!, ikcReportId: ID!): Boolean
  denyIKCReport(userId: ID!, ikcReportId: ID!): Boolean

  # can only do these two for non-approved reports
  addContributionToReport(
    userId: ID!
    ikcReportId: ID!
    contributionId: ID!
  ): Boolean
  removeContributionFromReport(
    userId: ID!
    ikcReportId: ID!
    contributionId: ID!
  ): Boolean

  # # Research Project mutations
  createResearchProject(
    siteAdminId: ID!
    adminId: ID!
    projectTitle: String!
    startDate: DateTime!
    endDate: DateTime!
  ): ID
  addPartnerOrg(userId: ID!, researchProjectId: ID!, partnerOrgId: ID!): Boolean
  addResearchProjectAdmin(
    userId: ID!
    newAdminId: ID!
    researchProjectId: ID!
  ): Boolean
  removeResearchProjectAdmin(
    userId: ID!
    removedAdminId: ID!
    researchProjectId: ID!
  ): Boolean
}

type User {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  siteAdmin: Boolean!
  active: Boolean
}

# in general refer to prisma but leave out some parts which may not be needed (ex include user id not user obj in contributor...)
type Contributor {
  id: ID
  userId: ID!

  partnerOrgId: ID!
  researchProjectId: ID!

  hourlyRate: Float!
  benRatePer: Float!
}

type PartnerOrg {
  id: ID!
  name: String!
  admins: [ID]!
  contributors: [Contributor]
}

# id for hourly and other are foreign keys with contrib item since 1-1
type HourContribution {
  hours: Float!
  hourlyRate: Float!
  benRatePer: Float!
}

type OtherContribution {
  itemName: String!
  value: Float!
  items: Int!
}

type Contribution {
  id: ID!
  contributorId: ID!
  date: DateTime!
  details: String!

  hourContribution: HourContribution
  otherContribution: OtherContribution
}

type MonthlyContrib {
  month: String!
  total: Float!
}

type ProjContrib {
  projectName: String!
  contributions: [MonthlyContrib]
}

# start date is the date the ikc report is created, end date is the date of the submission
type IKCReport {
  id: ID!
  partnerOrgId: ID!
  researchProjectId: ID!
  reportStartDate: DateTime!

  contributions: [Contribution]
  submitterId: ID
  submissionDate: DateTime
  isApproved: Boolean
  approverId: ID
  approvalDate: DateTime
}

# reduce output as research proj don't need to know org admins
type PartnerOrgItem {
  id: ID!
  name: String!
  contributors: [Contributor]
}
type ResearchProject {
  id: ID!
  projectTitle: String
  startDate: DateTime
  endDate: DateTime
  admins: [ID]
  projectPartners: [PartnerOrgItem]
  ikcReports: [IKCReport]
}
